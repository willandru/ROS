NOdo publicador: Encargado de abrir el mensaje.

Ejemplo, este nodo va a ser el periodico el TIempo que va a dar noticias . Tasmite noticias a todo el muundo

NODO SUBSCRIPTOR: El que paga la cuota para tener acceso a todos los mensajes.

TOPICO: Es el medio de comunicacion para comunicarse 

Un nodo publica y otro se comunica. por medio de un topico.

El nodo subscriptor, se subscribe al ROS MASTER sobre el NODO PUBLICADOR. 
El nodo publicador le envia el mensaje al ROS TOPIC, y este se lo envia al subsriptor.


¿Qué se publica?
1. Mensaje sprimitivos: Tibos de datos basicos: Booleano, entero, flotante,String
2. Las cadenas: FLoat64, Double64, ....
3. Mensajes complejos: twists o un gometry msg

:


rosrun turtleim : corre el paquete del turtlesim, que guarda todos los archivos

COMO CREAR UN PAQUETE:

catkin-> Herramienta para buildiar o cargar Ros configuartions.

catkin_create_pkg -> 
	parametros: nombredelPaquete Dependencias_queNecesita.
	Dependencias: todos los paquetes, datos o informacion necesarios para crear el paquete.

ROS: C++ y Python -> roscpp rospy


catkin_create_pkg topics_ras rospy roscpp std_msgs

Library: standar mssg: TIenen las variables primitivas:
std_msgs -> encargado de enviar variables primitivas

Despues de crear un paquete, se BUILDEA:

catkinmake


PACKAGE.xml: Descripcion basica de su paquete, mostrar Autor, DESCRIPCION QUE VA HACER, dEPENDENCIAS QUE TIENE:

CmakeLists.txt: Muy importante: 
Lo primero que tiene son los paquetes que van a incluir:: van a quedar los mensajes y las dependencias
Otra parte es:Como crear mensajes y servicios
Luego: Las dependencias de los mensajes que se generan
generate msg y katkinpackage: INcluyen toda la generacion de  mensajes.

Por ultimo: Si crean un archivo de C++, para poner las herramientas de ejecucion.Desde python no es neesario.

CREAR EL NODO PUBLICADOR Y EL NODO SUBSCRIPTO (PYTHON):

workspace/
	source/pkg_name: Crear diferentes folders

1. Los mensajes, si no te satisfacen los que te da ROS. lOS Puedes dcrear tu (msg, srv):: Crear una carpeta msg, srv
2. Necesitan lanzar diferentes ejecutables, es decir correr de manera simultanea varios nodos: necesiamos carpeta Launch
3. Herramientass de simulacion:: sim
4. Formas y diseños del robot: shapes(simulacion, como esta construido, guardar los archivos y codigos de c++ y pyhton)


Para C++ la herramienta siempre va a ser SRC
Para los headers de C++: INCLUDES

Para PYTHON: SCRIPT

5. Mundos(WORLD), y conjunto de instucciones.

SIEMPRE QUE CREE UN PAQUETE CREAR FODLERS: src, scripts

COmo definir un rospy.Publisher( Name, tipo_mensaje, tamaño_cola_datos)

rospy.Publisher('chatter', String, queue_size=10)

mensaje -> .msg

Python va apublicar un String:
from std_msgs import String
